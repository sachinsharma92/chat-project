/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 tulip.glb -T -S -I -t
*/

import * as THREE from 'three';
import React, { useMemo, useContext, createContext } from 'react';
import { useGLTF, Merged } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useAsset } from '@/store/CanvasProvider';
import { tulipModelPath } from '@/contants';

type GLTFResult = GLTF & {
  nodes: {
    Plane002: THREE.Mesh;
    Plane004: THREE.Mesh;
    Plane005: THREE.Mesh;
    Plane001: THREE.Mesh;
  };
  materials: {
    ['Material.002']: THREE.MeshStandardMaterial;
  };
};

type ContextType = Record<
  string,
  React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>
>;

const context = createContext({} as ContextType);
export function Instances({
  children,
  ...props
}: JSX.IntrinsicElements['group']) {
  const model = useAsset('tulip');
  const { nodes } = model as GLTFResult;
  const instances = useMemo(
    () => ({
      Plane: nodes.Plane002,
      Plane1: nodes.Plane004,
      Plane2: nodes.Plane005,
      Plane3: nodes.Plane001,
    }),
    [nodes],
  );
  return (
    <Merged meshes={instances} {...props}>
      {(instances: ContextType) => (
        <context.Provider value={instances}>{children}</context.Provider>
      )}
    </Merged>
  );
}

export default function Tulip(props: JSX.IntrinsicElements['group']) {
  const instances = useContext(context);
  return (
    <group {...props} dispose={null} scale={0.3}>
      <instances.Plane
        position={[-0.09, 0.44, -1.5]}
        rotation={[1.58, -0.18, 0.3]}
        scale={1.23}
      />
      <instances.Plane1
        position={[0.33, -0.68, -1.58]}
        rotation={[-1.23, 0.8, 2.29]}
        scale={[0.87, 1.01, 1.01]}
      />
      <instances.Plane2
        position={[-0.02, -0.12, -1.64]}
        rotation={[-0.03, 1.31, -1.59]}
        scale={[1, 1.01, 1.22]}
      />
      <instances.Plane3
        position={[-0.23, -0.7, -1.67]}
        rotation={[-1.86, -0.79, 2.6]}
        scale={[0.68, 0.79, 0.79]}
      />
    </group>
  );
}

useGLTF.preload(tulipModelPath);

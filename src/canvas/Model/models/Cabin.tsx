/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 cabin.glb -T -S -t
*/

import * as THREE from 'three';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { CuboidCollider, RigidBody } from '@react-three/rapier';
import { useAsset } from '@/store/CanvasProvider';
import { cabinModelPath } from '@/constants';

type GLTFResult = GLTF & {
  nodes: {
    cabin: THREE.Mesh;
    cabin_a: THREE.Mesh;
  };
  materials: {
    h: THREE.MeshStandardMaterial;
    ha: THREE.MeshStandardMaterial;
  };
};

export default function Cabin(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useAsset('cabin') as GLTFResult;
  return (
    <group {...props} dispose={null} scale={0.8}>
      <RigidBody type="fixed" colliders={false}>
        <CuboidCollider args={[1.6, 0.6, 1.5]} position={[0, 1, -1]} />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.cabin.geometry}
          material={materials.h}
        >
          {/* <meshToonMaterial color="green" /> */}
        </mesh>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.cabin_a.geometry}
          material={materials.ha}
        />
      </RigidBody>
    </group>
  );
}

useGLTF.preload(cabinModelPath);

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 campfire.glb -T -S -t
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { CylinderCollider, RigidBody } from "@react-three/rapier";
import { useAsset } from "@/store/CanvasProvider";

type GLTFResult = GLTF & {
  nodes: {
    camp_Baked: THREE.Mesh;
    fire_Baked: THREE.Mesh;
  };
  materials: {
    camp_Baked: THREE.MeshStandardMaterial;
    fire_Baked: THREE.MeshStandardMaterial;
  };
};

export default function Campfire(props: JSX.IntrinsicElements["group"]) {
  const model = useAsset("campfire");
  const { nodes, materials } = model as GLTFResult;
  return (
    <RigidBody position={[0.55, 0.08, 6.7]} colliders={false} type="fixed">
      <CylinderCollider args={[0.4, 0.7]} position={[0, 0.35, 0]} />
      <group {...props} dispose={null} scale={0.004}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.camp_Baked.geometry}
          material={materials.camp_Baked}
          rotation={[Math.PI / 2, 0, 0]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.fire_Baked.geometry}
          material={materials.fire_Baked}
          position={[-0.5, 67.56, 1.05]}
          rotation={[Math.PI / 2, 0, 0]}
          scale={[0.94, 0.97, 0.97]}
        />
      </group>
    </RigidBody>
  );
}

useGLTF.preload("/assets/models/campfire.glb");

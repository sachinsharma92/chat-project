/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 campfire.glb -T -S -t
*/

import * as THREE from 'three';
import React, { useEffect, useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useAsset } from '@/store/CanvasProvider';
import { CylinderCollider, RigidBody } from '@react-three/rapier';

type GLTFResult = GLTF & {
  nodes: {
    camp_Baked: THREE.Mesh;
    fire_Baked: THREE.Mesh;
  };
  materials: {
    camp_Baked: THREE.MeshStandardMaterial;
    fire_Baked: THREE.MeshStandardMaterial;
  };
};

export default function Campfire(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>(null);
  const model = useAsset('campfire');
  const { nodes, materials, animations } = model as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    if (actions && actions['fire']) {
      actions['fire'].play();
    }
  }, [actions]);
  return (
    <group ref={group} {...props} dispose={null}>
      <RigidBody position={[0.55, 0.08, 6.7]} colliders={false} type="fixed">
        <CylinderCollider args={[0.6, 0.7]} position={[0, 0.35, 0]} />
        <group name="Scene">
          <mesh
            castShadow
            receiveShadow
            name="camp_Baked"
            geometry={nodes.camp_Baked.geometry}
            material={materials.camp_Baked}
          />
          <mesh
            castShadow
            receiveShadow
            name="fire_Baked"
            geometry={nodes.fire_Baked.geometry}
            material={materials.fire_Baked}
            morphTargetDictionary={nodes.fire_Baked.morphTargetDictionary}
            morphTargetInfluences={nodes.fire_Baked.morphTargetInfluences}
          />
        </group>
      </RigidBody>
    </group>
  );
}

useGLTF.preload('/assets/models/campfire.glb');
